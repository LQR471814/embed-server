// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api.proto

package embed_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmbedServerClient is the client API for EmbedServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbedServerClient interface {
	Configure(ctx context.Context, in *EmbedOptions, opts ...grpc.CallOption) (*Empty, error)
	Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*Embeddings, error)
}

type embedServerClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbedServerClient(cc grpc.ClientConnInterface) EmbedServerClient {
	return &embedServerClient{cc}
}

func (c *embedServerClient) Configure(ctx context.Context, in *EmbedOptions, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/EmbedServer/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embedServerClient) Embed(ctx context.Context, in *EmbedRequest, opts ...grpc.CallOption) (*Embeddings, error) {
	out := new(Embeddings)
	err := c.cc.Invoke(ctx, "/EmbedServer/Embed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbedServerServer is the server API for EmbedServer service.
// All implementations must embed UnimplementedEmbedServerServer
// for forward compatibility
type EmbedServerServer interface {
	Configure(context.Context, *EmbedOptions) (*Empty, error)
	Embed(context.Context, *EmbedRequest) (*Embeddings, error)
	mustEmbedUnimplementedEmbedServerServer()
}

// UnimplementedEmbedServerServer must be embedded to have forward compatible implementations.
type UnimplementedEmbedServerServer struct {
}

func (UnimplementedEmbedServerServer) Configure(context.Context, *EmbedOptions) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedEmbedServerServer) Embed(context.Context, *EmbedRequest) (*Embeddings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embed not implemented")
}
func (UnimplementedEmbedServerServer) mustEmbedUnimplementedEmbedServerServer() {}

// UnsafeEmbedServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbedServerServer will
// result in compilation errors.
type UnsafeEmbedServerServer interface {
	mustEmbedUnimplementedEmbedServerServer()
}

func RegisterEmbedServerServer(s grpc.ServiceRegistrar, srv EmbedServerServer) {
	s.RegisterService(&EmbedServer_ServiceDesc, srv)
}

func _EmbedServer_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedServerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmbedServer/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedServerServer).Configure(ctx, req.(*EmbedOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbedServer_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedServerServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmbedServer/Embed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedServerServer).Embed(ctx, req.(*EmbedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbedServer_ServiceDesc is the grpc.ServiceDesc for EmbedServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbedServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmbedServer",
	HandlerType: (*EmbedServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _EmbedServer_Configure_Handler,
		},
		{
			MethodName: "Embed",
			Handler:    _EmbedServer_Embed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
