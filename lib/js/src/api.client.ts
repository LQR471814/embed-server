// @generated by protobuf-ts 2.9.3 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "api.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EmbedServer } from "./api";
import type { Embeddings } from "./api";
import type { EmbedRequest } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./api";
import type { EmbedOptions } from "./api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service EmbedServer
 */
export interface IEmbedServerClient {
    /**
     * @generated from protobuf rpc: Configure(EmbedOptions) returns (Empty);
     */
    configure(input: EmbedOptions, options?: RpcOptions): UnaryCall<EmbedOptions, Empty>;
    /**
     * @generated from protobuf rpc: Embed(EmbedRequest) returns (Embeddings);
     */
    embed(input: EmbedRequest, options?: RpcOptions): UnaryCall<EmbedRequest, Embeddings>;
}
/**
 * @generated from protobuf service EmbedServer
 */
export class EmbedServerClient implements IEmbedServerClient, ServiceInfo {
    typeName = EmbedServer.typeName;
    methods = EmbedServer.methods;
    options = EmbedServer.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Configure(EmbedOptions) returns (Empty);
     */
    configure(input: EmbedOptions, options?: RpcOptions): UnaryCall<EmbedOptions, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmbedOptions, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Embed(EmbedRequest) returns (Embeddings);
     */
    embed(input: EmbedRequest, options?: RpcOptions): UnaryCall<EmbedRequest, Embeddings> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmbedRequest, Embeddings>("unary", this._transport, method, opt, input);
    }
}
